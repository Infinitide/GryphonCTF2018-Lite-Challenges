#!/usr/bin/env python3
import re

moveOptions = {
	"" : [0, 1, 2, 3],
	0 : [0, 1, 3],
	1 : [0, 1, 2],
	2 : [1, 2, 3],
	3 : [0, 2, 3]
}

def main():
	pattern = (b'\xe2\x96\x93\xe2\x96\x91\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\n\xe2\x96\x93\xe2\x96\x91\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\n\xe2\x96\x93\xe2\x96\x91\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\n\xe2\x96\x93\xe2\x96\x91\xe2\x96\x91\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\n\xe2\x96\x93\xe2\x96\x93\xe2\x96\x91\xe2\x96\x91\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\n\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x91@\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\n\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\n\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\n\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93\xe2\x96\x93').decode()
	pattern = re.split("\n", pattern)
	pattern = [list(row) for row in pattern]
	sides = len(pattern)
	found = False

	for row in range(0, sides):
		for col in range(0, sides):
			if pattern[row][col] == "@":
				found = True
				break
		if found:
			break

	solution = pollAll(pattern, row, col)
	print(solution)

def pollAll(maze, row, col, lastMoves = [""]):
	movesPossible = moveOptions[lastMoves[len(lastMoves) - 1]]
	startRow = row
	startCol = col
	newRow, newCol = [0 for _ in range(0, 2)]

	for move in movesPossible:
		newRow, newCol = nextBlock(row, col, move)
		try:
			if maze[newRow][newCol] == "â–‘":
				lastMoves.append(move)
				pollAll(maze, newRow, newCol, lastMoves)
		except:
			break

	return lastMoves

def nextBlock(row, col, move):
	if move == 0:
		row -= 1
	elif move == 1:
		col += 1
	elif move == 2:
		row += 1
	elif move == 3:
		col -= 1

	return (row, col)

if __name__ == "__main__":
	main()